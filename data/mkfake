#!/usr/bin/perl

use POSIX;

$pi=3.14159265358979;
$d2r=$pi/180.;
$mas2r=$pi/(180.*3600.*1000.);
$py2kms=3.086e+13/(365.25*24.*3600.);

# read in data
if (0) {
open(fp,"<for_kvj.txt");
$nstars=0;
while(<fp>) {
	if(!/^#/) {
		 chop;
		 split;
		 $ra[$nstars]=$d2r*$_[1]; # in radians
		 $dec[$nstars]=$d2r*$_[2]; # in radians
		 $parallax[$nstars]=1000./$_[3]; # in parsecs
		 $pmra[$nstars]=$mas2r*$_[4]; # in radians
		 $pmdec[$nstars]=$mas2r*$_[5]; # in radians
		 $nstars++;
	 }
}
close(fp);
}
$nstars=40000;
for($i=0;$i<$nstars;$i++) {
	$ra[$i]=2.*$pi*rand();
	$sindec=-1.+2.*rand();
	$dec[$i]=asin($sindec);
	$par3=1.e+6*rand();
	$parallax[$i]=pow($par,1./3.);
}

for($i=0;$i<$nstars;$i++) {
	# convert to x y z 
	$x[$i]=cos($dec[$i])*cos($ra[$i]);
	$pos[$i*3+0]=$parallax[$i]*$x[$i];
	$y[$i]=cos($dec[$i])*sin($ra[$i]);
	$pos[$i*3+1]=$parallax[$i]*$y[$i];
	$z[$i]=sin($dec[$i]);
	$pos[$i*3+2]=$parallax[$i]*$z[$i];

	# get alpha unit vector
	$alphanorm=sqrt($x[$i]*$x[$i]+$y[$i]*$y[$i]);
	$alphahat[0]=$y[$i]/$alphanorm;
	$alphahat[1]=-$x[$i]/$alphanorm;
	$alphahat[2]=0.;

	# get delta unit vector
	$deltahat[0]=-$x[$i]*$z[$i]/$alphanorm;
	$deltahat[1]=$y[$i]*$z[$i]/$alphanorm;
	$deltahat[2]=-$alphanorm;

	# velocity (with radial velocity equal to zero) in kms
	$vel[$i*3+0]=0.;
	$vel[$i*3+1]=0.;
	$vel[$i*3+2]=20.;
	$vdr=0.;
	$vdr+=$vel[$i*3+0]*$x[$i]+$vel[$i*3+1]*$y[$i]+$vel[$i*3+2]*$z[$i];
	$vel[$i*3+0]-=$vdr*$x[$i];
	$vel[$i*3+1]-=$vdr*$y[$i];
	$vel[$i*3+2]-=$vdr*$z[$i];
}

$nflts=$nstars*3;
$whole=pack("f$nflts",@pos);
open(thelist,">fakepos.pts");
syswrite(thelist,$whole,4*$nflts);
close(thelist);

$nflts=$nstars*3;
$whole=pack("f$nflts",@vel);
open(thelist,">fakevel.pts");
syswrite(thelist,$whole,4*$nflts);
close(thelist);
